import java.util.*;

public class DescarregamentoNavio {

    // Limite dos recipientes
    static final int CAPACIDADE_ARMAZEM = 100;
    static final int CAPACIDADE_CAMINHAO = 50;

    // Faixa de volume dos contÃªineres tipo A e B
    static final int MIN_TIPO_A = 10, MAX_TIPO_A = 20;
    static final int MIN_TIPO_B = 25, MAX_TIPO_B = 40;

    // Quantidade mÃ­nima e mÃ¡xima de contÃªineres que podem ser descarregados
    static final int MIN_CONTAINERS = 20;
    static final int MAX_CONTAINERS = 30;

    // Gera volumes aleatÃ³rios pra simular os contÃªineres
    public static int[] gerarVolumesAleatorios(int quantidade) {
        Random random = new Random();
        int[] volumes = new int[quantidade];

        for (int i = 0; i < quantidade; i++) {
            // 50% de chance de ser tipo A ou B
            if (random.nextBoolean()) {
                volumes[i] = random.nextInt(MAX_TIPO_A - MIN_TIPO_A + 1) + MIN_TIPO_A;
            } else {
                volumes[i] = random.nextInt(MAX_TIPO_B - MIN_TIPO_B + 1) + MIN_TIPO_B;
            }
        }

        return volumes;
    }

    // Tenta encaixar os volumes nos recipientes do jeito mais eficiente possÃ­vel
    public static int calcularRecipientesNecessarios(Integer[] volumes, int capacidade) {
        List<Integer> recipientes = new ArrayList<>();

        for (int volume : volumes) {
            boolean encaixado = false;

            for (int i = 0; i < recipientes.size(); i++) {
                if (recipientes.get(i) + volume <= capacidade) {
                    recipientes.set(i, recipientes.get(i) + volume);
                    encaixado = true;
                    break;
                }
            }

            if (!encaixado) {
                // NÃ£o coube em nenhum, vamos criar um novo recipiente
                recipientes.add(volume);
            }
        }

        return recipientes.size();
    }

    public static void main(String[] args) {
        Random random = new Random();
        int quantidadeContainers = random.nextInt(MAX_CONTAINERS - MIN_CONTAINERS + 1) + MIN_CONTAINERS;

        // Gerando os volumes dos contÃªineres que chegaram
        int[] volumesContainers = gerarVolumesAleatorios(quantidadeContainers);

        System.out.println("ðŸš¢ Total de contÃªineres descarregados: " + quantidadeContainers);
        System.out.println("Volumes:");
        System.out.println(Arrays.toString(volumesContainers));

        // Convertendo pra Integer pra poder ordenar (Java, nÃ©...)
        Integer[] volumesOrdenados = Arrays.stream(volumesContainers)
                .boxed()
                .sorted(Collections.reverseOrder()) // maior volume primeiro
                .toArray(Integer[]::new);

        System.out.println("\nðŸ”½ Volumes ordenados (do maior pro menor):");
        System.out.println(Arrays.toString(volumesOrdenados));

        // Agora vamos ver quantos armazÃ©ns e caminhÃµes precisarÃ­amos
        int armazens = calcularRecipientesNecessarios(volumesOrdenados, CAPACIDADE_ARMAZEM);
        int caminhoes = calcularRecipientesNecessarios(volumesOrdenados, CAPACIDADE_CAMINHAO);

        System.out.println("\nðŸ“¦ ArmazÃ©ns necessÃ¡rios: " + armazens);
        System.out.println("ðŸš› CaminhÃµes necessÃ¡rios: " + caminhoes);


System.out.println(
    "\nNOME DOS DESENVOLVEDORES DO CÃ“DIGO\n" +
    "Caio Lemos Martins Rondini - 1262216435\n" +
    "Ian Ramos Texeira - 12622111817\n" +
    "Juliana Helena Mendes Pereira - 12622112925\n" +
    "Luiz Marcelo dos Santos Nogueira - 1262216844\n" +
    "Matheus Ferreira de Freitas - 12622112086\n"
);

    }
}
